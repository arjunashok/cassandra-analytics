/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

project(':cassandra-analytics-integration-tests') {
    apply(plugin: 'java-library')

    repositories {
        mavenLocal()
    }

    dependencies {
        testImplementation(group: "${sparkGroupId}", name: "spark-core_${scalaMajorVersion}", version: "${project.rootProject.sparkVersion}")
        testImplementation(group: "${sparkGroupId}", name: "spark-sql_${scalaMajorVersion}", version: "${project.rootProject.sparkVersion}")

        // JUnit
        testImplementation("org.junit.jupiter:junit-jupiter-api:${project.junitVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-params:${project.junitVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:${project.junitVersion}")

        // we use the Sidecar integration test framework as well, so it needs to be built and deployed to mavenLocal.
        // TODO: More documentation!
        // ./gradlew -Pversion=1.0.0-local publishToMavenLocal
        testImplementation(group: 'org.apache.cassandra.sidecar', name: 'common', version: '1.0.0-local')
        testImplementation(group: 'org.apache.cassandra.sidecar', name: 'adapters-base', version: '1.0.0-local')
        // The server itself
        testImplementation (group: "org.apache.cassandra", name: "cassandra-sidecar", version: "1.0.0-local") {
            exclude(group: 'org.apache.logging.log4j')
            exclude(group: 'org.slf4j')
            exclude(group: 'ch.qos.logback')
        }

        ext.dtestJar = System.getenv("DTEST_JAR") ?: "dtest-5.0.jar" // trunk is currently 5.0.jar - update when trunk moves
        println("Using DTest jar: ${ext.dtestJar}")
        testImplementation(files("dtest-jars/${ext.dtestJar}"))
        testImplementation("org.apache.cassandra:dtest-api:0.0.15")
        // Needed by the Cassandra dtest framework
        testImplementation("org.junit.vintage:junit-vintage-engine:${junitVersion}")
        testImplementation(project(':cassandra-analytics-core-example'))
        testImplementation('com.datastax.cassandra:cassandra-driver-core:3.9.0')

        testImplementation('org.mockito:mockito-inline:4.10.0')
        testImplementation("org.assertj:assertj-core:3.24.2")
        testImplementation("com.google.guava:guava:27.0.1-jre")
        testImplementation("org.junit.jupiter:junit-jupiter-api:${project.junitVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-params:${project.junitVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:${project.junitVersion}")
        testImplementation("org.apache.cassandra:dtest-api:0.0.15")
        testImplementation("org.junit.vintage:junit-vintage-engine:${junitVersion}")
        testImplementation('com.google.inject:guice:4.2.2')
        testImplementation("io.vertx:vertx-web:${project.vertxVersion}") {
            exclude group: 'junit', module: 'junit'
        }
        implementation("io.vertx:vertx-web-client:${project.vertxVersion}")
        testImplementation("io.vertx:vertx-junit5:${project.vertxVersion}")
    }


    test {
        minHeapSize = '1024m'
        maxHeapSize = '3072m'
        maxParallelForks = Math.max(Runtime.runtime.availableProcessors() * 2, 8)
        forkEvery = 1  // Enables different end-to-end test classes use Spark contexts with different configurations

        // Make it so unit tests run on a JAr with Cassandra bridge implementations built in
        dependsOn(tasks.jar)
        classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(jar.archiveFile)
        useJUnitPlatform()
    }
}
